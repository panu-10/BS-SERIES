###SQRT OF A NUMBER
int f(int n){
    int low=1,high=n;
    long long ans=1;
    while(low<=high){
        long long mid=(low+high)/2;
        long long p=(mid*mid);
        if(p>n){
            high=mid-1;
        }
        else{
            ans=mid;
            low=mid+1;
        }
    }
    return high;
}
int floorSqrt(int n)
{
      return f(n);
}
### nth root of a number
int find(int mid,int n,int m){
  long long w=1;
  for(int i=0;i<n;i++){
      w=w*mid;
      if(w>m) return 2;
  }
   if(w==m) return 1;
   return 0;
}
int NthRoot(int n, int m) {
     int low=1,high=m;
     while(low<=high){
       long long mid=(low+high)/2;
       long long p=find(mid,n,m);
       if(p==1){
          return mid;
       }
       else if(p==0) low=mid+1;
       else high=mid-1;
     }
     return -1;
}

###koko eating bananas
int find(vector<int>&v){
    int maxi=-1e9;
    for(int i=0;i<v.size();i++){
        maxi=max(maxi,v[i]);
    }
    return maxi;
}
long long  check(int mid,vector<int>&v){
    long long int totaltime=0;
    for(int i=0;i<v.size();i++){
        totaltime+= ceil((double)v[i]/(double)mid);
    }
    return totaltime;
}
int minimumRateToEatBananas(vector<int> v, int h) {
      int low=1;
      int high=find(v);
      while(low<=high){
          int mid=(low+high)/2;
          long long int p=check(mid,v);
          if(p<=h){
              high=mid-1;
          }
          else{
              low=mid+1;
          }
      }
      return low;
}

###min days to make m bouqets
bool check(int mid,vector<int>&v,int k,int m){
	  int total=0;
	  int count=0;
	  for(int i=0;i<v.size();i++){
           if(v[i]<=mid){
			   count++;
		   }
		   else{
			   total+=(count/k);
			   count=0;
		   }
	  }
	  total+=(count/k);
	  if(total>=m) return true;
	  return false;
}
int roseGarden(vector<int> arr, int k, int m)
{
	long long val=m*1ll*k*1ll;
	if(arr.size()<val) return -1;
	int low=1e9,high=-1e9;
	for(int i=0;i<arr.size();i++){
		low=min(low,arr[i]);
		high=max(high,arr[i]);
	}
	while(low<=high){
		int mid=(low+high)/2;
		if(check(mid,arr,k,m)){
             high=mid-1;
		}
		else{
          low=mid+1;
		}
	}
	return low;
}
###smallest divisor
int check(vector<int>&arr,int limit,int mid){
	int count=0;
	for(int i=0;i<arr.size();i++){
		count+=ceil((double)arr[i]/(double)mid);
	}
	return count;
}
int smallestDivisor(vector<int>& arr, int limit)
{
	int low=0;
	int high=*max_element(arr.begin(),arr.end());
	while(low<=high){
       int mid=(low+high)/2;
	   if(check(arr,limit,mid)<=limit){
		   high=mid-1;
	   }
	   else{
		   low=mid+1;
	   }
	}
	return low;
}
###capacity to ship package within d days
int find(int cap,vector<int> &weights){
    int day=1,load=0;
    for(int i=0;i<weights.size();i++){
        if(load+weights[i]>cap){
            day++;
            load=weights[i];
        }
        else{
            load+=weights[i];
        }
    }
    return day;
}
int leastWeightCapacity(vector<int> &weights, int d)
{
    int low=*max_element(weights.begin(),weights.end());
    int high=0;
    for(int i=0;i<weights.size();i++) high+=weights[i];
    while(low<=high){
        int mid=(low+high)/2;
        if(find(mid,weights)<=d){
            high=mid-1;
        }
        else{
            low=mid+1;
        }
    }
    return low;
}
###kth missing number ******
int missingK(vector < int > vec, int n, int k) {
    int low=0,high=n-1;
    while(low<=high){
        int mid=(low+high)/2;
        int missing=vec[mid]-(mid+1);
        if(missing<k){
            low=mid+1;
        } else {
            high = mid - 1;
        }
    }
    return high+k+1;
}
###agressive cows ********
bool check(vector<int>&stalls,int dist,int cows){
       int no=1,last=stalls[0];
       for(int i=0;i<stalls.size();i++){
           if(stalls[i]-last>=dist){
                 no++;
                 last=stalls[i];
           }
           if(no>=cows) return true;
       }
       return false;
}
int aggressiveCows(vector<int> &stalls, int k)
{
    sort(stalls.begin(),stalls.end());
    int n=stalls.size();
    int low=1,high=stalls[n-1]-stalls[0];
    while(low<=high){
        int mid=(low+high)/2;
        if(check(stalls,mid,k)==true){
            low=mid+1;
        } else {
            high = mid - 1;
        }
    }
    return high;
}
###allocate books,painter partition,longest subarray sum 
int check(int pages,vector<int>&arr){
    int stud=1;
    long long reqpages=0;
    for(int i=0;i<arr.size();i++){
        if(reqpages+arr[i]<=pages){
            reqpages+=arr[i];
        }
        else{
            stud++;
            reqpages=arr[i];
        }
    }
    return stud;
}
int findPages(vector<int>& arr, int n, int m) {
    if(m>n) return -1;
   int low=*max_element(arr.begin(),arr.end());
   int high=accumulate(arr.begin(),arr.end(),0);
   while(low<=high){
       int mid=(low+high)/2;
       if(check(mid,arr)>m){
           low=mid+1;
       } else {
           high = mid - 1;
       }
   }
   return low;
}